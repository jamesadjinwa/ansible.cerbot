---
- hosts: all
  gather_facts: false
  become: true
  vars_files:
    - vars/vars.yml

  handlers:
    - name: Reload haproxy
      service:
        name: haproxy
        state: reload
      listen: "reload haproxy"

  tasks:
  - name: "Create required directories in /etc/letsencrypt"
    file:
      path: "/etc/letsencrypt/{{ item }}"
      state: directory
      owner: root
      group: root
      mode: u=rwx,g=x,o=x
    with_items:
    - account
    - certs
    - csrs
    - keys

  # - block:
  #   - name: install bash
  #     apk:
  #       name: bash
  #       state: latest
  #       update_cache: no

  #   - name: Install dnspython python package
  #     pip:
  #       name: dnspython
  #       state: absent
        # executable: pip

  - stat:
      path: "{{ letsencrypt_account_key }}"
    register: account_key

  # - name: "Backup account key"
  #   when: account_key is defined
  
  - name: "Generate a Let's Encrypt account key"
    shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | tee {{ letsencrypt_account_key }}; fi"
    when: account_key.stat.exists == False

  - stat: 
      path: "{{ letsencrypt_keys_dir }}/{{ item }}.key }}"
    register: private_key
    with_items: "{{ domain_names }}"

  # - debug:
  #     msg: "{{ private_key }}"

  # - debug: 
  #     msg: "{{ private_key['results'][ansible_loop.index0]['stat']['exists'] }}"
  #   loop: "{{ domain_names }}"
  #   loop_control:
  #     loop_var: item
  #     extended: yes

  # - block:
  - name: 
    include_tasks: tasks/generate.yml
    loop: "{{ domain_names }}"
    loop_control:
      loop_var: item
      extended: yes
    when: private_key['results'][ansible_loop.index0]['stat']['exists'] == False

  - name: "Begin Let's Encrypt challenges"
    acme_certificate:
      acme_directory: "{{ acme_directory }}"
      acme_version: "{{ acme_version }}"
      account_key_src: "{{ letsencrypt_account_key }}"
      account_email: "{{ acme_email }}"
      terms_agreed: yes
      challenge: "{{ acme_challenge_type }}"
      src: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
      cert: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
      remaining_days: 60
      # force: yes
    register: acme_challenge_data 
    with_items: "{{ domain_names }}"
    ignore_errors: True

  - set_fact:
      dns_records: "{{ dns_records|default([]) + [ {'txt' : acme_challenge_data['results'][ansible_loop.index0]['challenge_data'][item]['dns-01'].record, 'value' : acme_challenge_data['results'][ansible_loop.index0]['challenge_data'][item]['dns-01'].resource_value} ] }}"
    loop: "{{ domain_names }}"
    loop_control:
      loop_var: item
      extended: yes
    # when: acme_challenge_data is succeeded
    when: acme_challenge_data['results'][ansible_loop.index0].changed

  - block:
    - name: Send an email to DNS Admin
      become: false
      sendgrid:
        api_key: "{{ sendgrid_api_key }}"
        from_address: "{{ sendgrid_from_address }}"
        subject: "{{ sendgrid_subject }}"
        to_addresses: "{{ sendgrid_to_addresses }}"
        body: |-
          {% for record in dns_records %}
            {{ record.txt }} : {{ record.value }}
          {% endfor %}
      delegate_to: localhost
      register: email_sent
    
    - name: Check if DNS TXT Records are updated
      shell: "echo Hello" 
      register: dns_updated
      until: item['value'] == "{{ lookup('dig', item['txt'], 'qtype=TXT') }}"
      retries: 10
      delay: 60
      
      loop: "{{ dns_records }}"
      when: email_sent is succeeded
    
    when: dns_records is defined 

  - name: Pause for 10 minutes 
    pause:
      minutes: 10
  
  # Loop this task until TXT DNS record is successfully checked
  - name: "Complete Let's Encrypt challenges"
    acme_certificate:
      acme_directory: "{{ acme_directory }}"
      acme_version: "{{ acme_version }}"
      account_key_src: "{{ letsencrypt_account_key }}"
      account_email: "{{ acme_email }}"
      terms_agreed: yes
      challenge: "{{ acme_challenge_type }}"
      src: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
      cert: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
      chain: "{{ letsencrypt_certs_dir }}/chain_{{ item }}.crt"
      fullchain: "{{ letsencrypt_certs_dir }}/fullchain_{{ item }}"
      #force: yes
      remaining_days: 60
      data: "{{ acme_challenge_data['results'][ansible_loop.index0] }}"
    loop: "{{ domain_names }}"
    loop_control:
      loop_var: item
      extended: yes
    #with_items: "{{ acme_challenge_data }}"
    register: validate_challenge
    # until: '"{{ letsencrypt_certs_dir }}/fullchain_{{ item }}" is file'
    # retries: 10
    # delay: 60
    # when: acme_challenge_data is changed
    # tags: sslcert
    # ignore_errors: True
    when: acme_challenge_data is succeeded

  - name: Check if certs 
    stat: 
      path: "{{ letsencrypt_certs_dir }}/fullchain_{{ item }}"
    register: challenge_certs
    with_items: "{{ domain_names }}"

  - name: "Copy certificates for Haproxy configuration"
    copy: 
      content: |
        {{ lookup('file', [letsencrypt_certs_dir ~ '/fullchain_' ~ item] | path_join) }}
        {{ lookup('file', [letsencrypt_keys_dir, item ~ '.key'] | path_join) }}
      dest: "{{ [haproxy_cert_dir, item ~ '.pem'] | path_join }}"
    with_items: "{{ domain_names }}"
    when: '"{{ letsencrypt_certs_dir }}/fullchain_{{ item }}" is file'
    notify: "reload haproxy"
    ignore_errors: True
    
    # when: challenge_certs|selectattr("stat", "exists") is defined and challenge_certs.stat.exists == True