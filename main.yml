---
- hosts: all
  gather_facts: false
  become: true
  vars_files:
    - vars/vars.yml

  handlers:
    - name: Reload haproxy
      service:
        name: haproxy
        state: reload
      listen: "reload haproxy"

  tasks:
  - name: "Create required directories in /etc/letsencrypt"
    file:
      path: "/etc/letsencrypt/{{ item }}"
      state: directory
      owner: root
      group: root
      mode: u=rwx,g=x,o=x
    with_items:
    - account
    - certs
    - csrs
    - keys

  - name: install bash
    apk:
      name: bash
      state: latest
      update_cache: no

  - stat:
      path: "{{ letsencrypt_account_key }}"
    register: account_key

  # - name: "Backup account key"
  #   when: account_key is defined
  
  - name: "Generate a Let's Encrypt account key"
    shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | tee {{ letsencrypt_account_key }}; fi"
    when: account_key.stat.exists == False

  # - name: Generate RSA 4096 key
  #   openssl_privatekey:
  #     path: "{{ letsencrypt_account_key }}"
  #     type: RSA
  #     size: 4096
  #     select_crypto_backend: auto
  #     state: present

  - name: "Generate Let's Encrypt private key"
    shell: "openssl genrsa 4096 | tee {{ letsencrypt_keys_dir }}/{{ item }}.key"
    with_items: "{{ domain_names }}"

  - name: "Generate Let's Encrypt CSR"
    #shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:www.{{ domain_name }}\")) | tee /etc/letsencrypt/csrs/{{ domain_name }}.csr"
    shell: > 
      openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ item }}.key
      -subj "/CN={{ item }}" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf
      <(printf "\n[SAN]\nsubjectAltName=DNS:{{ item }}"))
      | tee /etc/letsencrypt/csrs/{{ item }}.csr
    with_items: "{{ domain_names }}"
    args:
      executable: /bin/bash

  - name: "Begin Let's Encrypt challenges"
    acme_certificate:
      acme_directory: "{{ acme_directory }}"
      acme_version: "{{ acme_version }}"
      account_key_src: "{{ letsencrypt_account_key }}"
      account_email: "{{ acme_email }}"
      terms_agreed: 1
      challenge: "{{ acme_challenge_type }}"
      csr: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
      dest: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
      fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ item }}.crt"
      #remaining_days: 91
      remaining_days: 60
      # force: yes
    register: acme_challenge_data 
    with_items: "{{ domain_names }}"

  # - debug:
  #     msg: "{{ item | json_query('challenge_data_dns') }}"
  #     #msg: "{{ acme_challenge_data.values() | list | first | json_query('challenge_data_dns') }}"
  #   with_items: "{{ acme_challenge_data.values() | list | first }}"

  - set_fact:
      acme_dns_challenge: "{{ acme_dns_challenge | default([]) + [ item | json_query('challenge_data_dns') ] }}"
    with_items: "{{ acme_challenge_data.values() | list | first }}"

  # - set_fact:
  #     acme_dns_challenge: "{{ acme_challenge_data.challenge_data.record }}"
  #   when: "'_acme-challenge' in item.key"
  #   with_dict: "{{ acme_challenge_data.get('challenge_data_dns', {}) }}"

  - debug:
      msg: >-
        Name: {{ item.key }}
        Zone: {{ item.key | regex_replace('^(?:.*\\.|)([^.]+\\.[^.]+)$', '\\1') }}
    # when: "'_acme-challenge' in item.key"
    with_items: "{{ acme_challenge_data.get('challenge_data_dns', {}) }}"
  
  # - debug:
  #     msg: |
  #       {% for challenge in item %}
  #       {{ challenge }}
  #       {% endfor %}
  #   with_items: "{{ acme_dns_challenge }}"

  - name: Send an email to DNS Admin
    become: false
    sendgrid:
      api_key: "{{ sendgrid_api_key }}"
      from_address: "{{ sendgrid_from_address }}"
      subject: "{{ sendgrid_subject }}"
      to_addresses: "{{ sendgrid_to_addresses }}"
      body: "{{ acme_dns_challenge }}"
    delegate_to: localhost
      

  # Loop this task until TXT DNS record is successfully checked
  - name: "Complete Let's Encrypt challenges"
    acme_certificate:
      acme_directory: "{{ acme_directory }}"
      acme_version: "{{ acme_version }}"
      account_key_src: "{{ letsencrypt_account_key }}"
      account_email: "{{ acme_email }}"
      challenge: "{{ acme_challenge_type }}"
      csr: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
      dest: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
      chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ item }}.crt"
      fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ item }}"
      #force: yes
      remaining_days: 60
      data: "{{ acme_challenge_data }}"
    with_items: "{{ domain_names }}"
    register: challenge_ok
    when: acme_challenge_data is changed
    # until: '"{{ letsencrypt_certs_dir }}/fullchain_{{ item }}" is file'
    # retries: 10
    # delay: 60

  # - name: Check if certs 
  #   stat: 
  #     path: "{{ letsencrypt_certs_dir }}/fullchain_{{ item }}"
  #   register: challenge_certs
  #   with_items: "{{ domain_names }}"

  - name: "Copy certificates for Haproxy configuration"
    copy: 
      content: |
        {{ lookup('file', [letsencrypt_certs_dir ~ '/fullchain_' ~ item] | path_join) }}
        {{ lookup('file', [letsencrypt_keys_dir, item ~ '.key'] | path_join) }}
      dest: "{{ [haproxy_cert_dir, item ~ '.pem'] | path_join }}"
    with_items: "{{ domain_names }}"
    when: '"{{ letsencrypt_certs_dir }}/fullchain_{{ item }}" is file'
    notify: "reload haproxy"
    ignore_errors: True
    
    # when: challenge_certs|selectattr("stat", "exists") is defined and challenge_certs.stat.exists == True