---

- name: Renew SSL certs
  hosts: node
  gather_facts: false
  become: true
  vars_files:
    - vars/vars.yml

  handlers:
    - name: Reload haproxy
      service:
        name: haproxy
        state: reload
      listen: "reload haproxy"

  tasks:

    - name: Check if Letsencrypt folder exists
      stat:
        path: "{{ letsencrypt_dir }}"
      register: letsencrypt_fol

    - name: Destroy Letsencrypt folder
      file:
        path: "{{ letsencrypt_dir }}"
        state: absent
      when: letsencrypt_fol.stat.exists

    - name: "Create required directories in letsencrypt"
      file:
        path: "{{ letsencrypt_dir }}/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=x,o=x
      with_items:
      - account
      - certs
      - csrs
      - keys

    - stat:
        path: "{{ letsencrypt_account_key }}"
      register: account_key

    - name: "Generate a Let's Encrypt account key"
      shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | tee {{ letsencrypt_account_key }}; fi"
      when: account_key.stat.exists == False
      changed_when: false

    - stat: 
        path: "{{ letsencrypt_keys_dir }}/{{ item }}.key }}"
      register: private_key
      with_items: "{{ domain_names }}"

    - name:
      include_tasks: tasks/generate.yml
      loop: "{{ domain_names }}"
      loop_control:
        loop_var: item
        extended: yes
      when: private_key['results'][ansible_loop.index0]['stat']['exists'] == False

    - name: "Begin Let's Encrypt challenges"
      acme_certificate:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_key }}"
        account_email: "{{ acme_email }}"
        terms_agreed: yes
        challenge: "{{ acme_challenge_type }}"
        src: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
        cert: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
        remaining_days: 60
        force: yes
      register: acme_challenge_data
      with_items: "{{ domain_names }}"
      retries: 3
      delay: 3
      until: acme_challenge_data is changed
      #ignore_errors: True

    - name: Check if acme-challenge folder exists  
      stat:
        path: "/root/projectfiles/nginx/.well-known/acme-challenge"
      register: acme_challenge

    - name: Delete acme-challenge folder
      file: 
        path: "/root/projectfiles/nginx/.well-known/acme-challenge"
        state: absent
      when: acme_challenge.stat.exists

    - name: Create challenge directories
      file:
        path: /root/projectfiles/nginx/.well-known/acme-challenge
        state: directory

    - name: Stop all services
      docker_compose:
        project_src: projectfiles
        build: false
        stopped: true
      tags: services

    - name: Create webserver
      docker_container:
        name: nginx
        image: nginx
        ports:
          - "80:80"
        env:
          NGINX_PORT=80
        volumes: /root/projectfiles/nginx:/usr/share/nginx/html:ro
        recreate: yes
        state: started

    - name: Wait for the webserver to be ready
      pause:
        seconds: 30

    - name: Prepare the challenge
      copy:
        dest: /root/projectfiles/nginx/{{ acme_challenge_data.results[0].challenge_data[item]['http-01']['resource'] }}
        content: "{{ acme_challenge_data.results[0].challenge_data[item]['http-01']['resource_value'] }}"
      with_items: "{{ domain_names }}"
      when: acme_challenge_data is changed
      ignore_errors: True

    - name: Validate challenge and retrieve certs
      acme_certificate:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_key }}"
        account_email: "{{ acme_email }}"
        terms_agreed: yes
        challenge: "{{ acme_challenge_type }}"
        src: "{{ letsencrypt_csrs_dir }}/{{ item }}.csr"
        cert: "{{ letsencrypt_certs_dir }}/{{ item }}.crt"
        fullchain: "{{ letsencrypt_certs_dir }}/{{ item }}-fullchain.crt"
        chain: "{{ letsencrypt_certs_dir }}/{{ item }}-intermediate.crt"
        remaining_days: 60
        force: yes
        data: "{{ acme_challenge_data.results[0] }}"
          #register: acme_challenge_data
      with_items: "{{ domain_names }}"
      when: acme_challenge_data is changed

    - name: Create Haproxy cert folder
      file:
        path: "{{ haproxy_cert_dir }}"
        state: directory

    - name: Create certifile used by Haproxy
      shell: "cat {{ letsencrypt_certs_dir }}/{{ item }}-fullchain.crt {{ letsencrypt_keys_dir }}/{{ item }}.key | tee {{ haproxy_cert_dir }}/{{ item }}-fullchain.pem"
      with_items: "{{ domain_names }}"
      when: acme_challenge_data is changed

    - name: "Create Certlist file"
      shell: "echo \"/etc/haproxy/certs/\"\"$(find {{ haproxy_cert_dir }} -maxdepth 1 -name '*-fullchain.pem' -printf \"%f\n\")\"  | tee {{ haproxy_cert_dir }}/certlist.txt"
      when: acme_challenge_data is changed

    - name: Destroy webserver
      docker_container:
        name: nginx
        state: absent

    - name: Start all services
      docker_compose:
        project_src: projectfiles
        build: false
        stopped: false
      tags: services